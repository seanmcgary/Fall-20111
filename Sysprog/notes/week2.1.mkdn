Week 2, Class 1
===

Environment Variables
---

```
char *getenv(const char *name);
```

- Searches for entry beginning with name (e.g. "USER");
- Returns pointer to it, or a null pointer

```
int putenv(char *string);
```

- Updates/replaces the environment vector with a new entry
    - Updates if exists
    - Creates if it doesnt exist
- May not be in all C library implementations

Dynamic Storage Allocation
---

###In C++

```
MyType *ptr;

ptr = new MyType;
```

- Allocates memory
- Invokes constructor for Type to initialize memory
- Assigns address to allocated memory to variable

###In C

```
MyType *ptr;

ptr = (Type *) malloc(sizeof(MyType));
```

- Allocates memory
- Assigns pointer to variable

- When done, we must deallocate space
    - C++ : ```delete ptr;```
    - C : ```free(ptr);```

- Can allocate arrays
    - C++ ```
        ptr = new Type[10];

        delete [] ptr;
        ```
    - C ```
        ptr = (Type *) malloc(10 * sizeof(Type));

        free(ptr); //simpler!
        ```
Prototypes
---

```
void *malloc(size_t bytes);
void *calloc(size_t num, size_t, bytes); // will clear out memory when allocating
void *realloc(void *ptr, size_t bytes);
void free(void *ptr);
```

Rules
---

- Can only free pointers that were allocated with malloc (et. al.)
    - Cannot free non-dynamically-allocated memory!
    - Cannot free parts of dynamically allocated memory
- When reallocating, old pointer is no longer usable
    - Can attempt to grow space
        - If it can, it will return the same pointer
        - If it cant, it will clear out the old space, and allocate memory in a new location
    - Allocated space may have moved!
    - Must use new pointer
- Once memory has been freed, not safe to access it any longer
    - May be reused when more memory is allocated

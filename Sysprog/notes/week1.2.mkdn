Week 1, Class 2 
===

Numeric Types in C
---
* char: 8-bit integer
* int: "natural sized" integer (specific to the architecture)
* short int: atleast 16-bit integer
* long int: atleast 32-bit integer
    * In architectures today, long int and int are most likely the same
* long long int: atleast 32-bit integer
* float: single-precision floating point
* double: douple-precision floating point
* long double: extended-precision floating point

Enumerated Types
---

* Basically integers with names
* Declare by listing all "values" in order

```
enum tag {
    v1, v2, ...
} var1, var2, ...;
```

Pointers
---

* Contain a reference to an element of some base type
* Is itself a base type
    * Can declare arrays of pointers and pointers to pointers
* Declare with unary prefix "*" on variable name in declaration

```
type *var1, *var2, var3,...;
```

Arrays
---
* Homogeneous collection of elements of some basic type
* Declare by adding postfix dimension specifier
* Can be multi-dimensional
* Stored [row][col]
    * Row-major order

```
type name [ dimension ];
type name [d1][d2] ...;
```

Structures
---

* Heterogeneous collections of elements
* Declare by listing the members in desired storage order
* Similar to classes
    * no member functions
    * all properties default to public
* Members must be the compiler knows the size of
    * pre-declared "objects"
    * arrays, ints, etc
    * pointers (knows the size of pointers)

```
struct tag {
    member_declarations
} var1, var2, ...;
```

Unions
---

* Structures whose members occupy the same storage space
* Declaration order of memebers is irrelevent
* Size of a union data member, is the size of the largest member
* Useful wehn you have a variable that has different kinds of information at different times
    * can be an int, then a float, then a double, etc

```
union tag {
    member_declarations
} var1, var2, ...;
```
    

Control Structures
---


### Unconditional Transfer

* Label is an identifier followed by ":"
* Usable anywhere within a function
* Rarely needed

```
goto label;
```

### Alter Execution of loop body

* Skips rest of body, but stays in loop
* Usable with any type of loop

```
continue
```

### Immediate exit from control structure

* Usable in a loop or switch statement
* Transfers to first statement after the body

```
break;
```

Decision constructs
---

###If statement
```
if( conditional ){
    then-clause
}
```

###Switch statement
```
switch( expression ){
    case c1: ...
    case c2: ...
    ...
    default
};
```

###If-else statement
```
if( conditional){
    then-clause
} else {
    else-clause
}
```

Looping Constructs
---

###Pre-test loops
* for loop
* while loop

```
for(init; test; inc){
    body
}


init
while(test) {
    body
    inc
}
```

###Post-test loop

```
init
do {
    body 
    inc
} 
while(test);
```

Operators
---
* All C operators exist in C++
* Many arent used the same way

<table>
    <tr>
        <th>Precedence</th>
        <th>Associativity</th>
    </tr>
    <tr>
        <td><pre>() [] . -></pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>++ -- + - ! ~ (type) * & sizeof</pre></td>
        <td>right-to-left</td>
    </tr>
    <tr>
        <td><pre>* / %</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>+ -</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre><< >></pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>< <= > >=</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>!= ==</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>&</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>^</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>|</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>&&</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>||</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>?:</pre></td>
        <td>left-to-right</td>
    </tr>
    <tr>
        <td><pre>+= -= *= /= %= &= ^= |= <<= >>= =</pre></td>
        <td>right-to-left</td>
    </tr>
    <tr>
        <td><pre>,</pre></td>
        <td>left-to-right</td>
    </tr>
</table>

Pointers
---

* Where the real work is done
* A pointer is a reference to something in memory
    * Data, function, etc
* Contents of a pointer variable is an address
* Declaration, initialization, and use:

```
int x;
int *ptr;

// assign the address of x to ptr
ptr = &x;

// dereference ptr and assign it tha value 42
*ptr = 42
```

* NUll pointer: reference to location 0
    * Compiler ensures that this will never be a valid data address

Pointer Arithmetic
---

* Allowed in C
* Legal forms
    * pointer +/- integer
    * pointer - pointer
* Scaled arithmetic
    * Increment is multiplied by the size of what the pointer points to
    * Incrementing a pointer to a "thing" makes it point to the next "thing" in memory
* Can also compare pointers to same base type
    * Can use all relationals: ```< <= == != >= >```

Pointers vs. Subscripts
---

* Array subscripting is really a pointer operation
    * x[5] is equivelent to *(x + 5)

